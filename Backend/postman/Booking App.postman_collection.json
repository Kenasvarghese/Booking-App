{
	"info": {
		"_postman_id": "b017f036-4a14-4563-8766-2b0a8601720d",
		"name": "Booking App",
		"description": "This Postman collection provides a complete set of API requests for testing and interacting with the **Booking App** backend. It covers essential CRUD operations for properties, rooms, and bookings.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44000987",
		"_collection_link": "https://kenasvarghese.postman.co/workspace/019591d3-8112-4456-8d7b-8c5760de6ae5/collection/44000987-b017f036-4a14-4563-8766-2b0a8601720d?action=share&source=collection_link&creator=44000987"
	},
	"item": [
		{
			"name": "List Properties",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/properties",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"properties"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Property",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Dietikon\",\n    \"room_count\":10,\n    \"address\":\"here\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/property",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"property"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Rooms",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/rooms?property_id=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rooms"
					],
					"query": [
						{
							"key": "property_id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add  Room",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"room_type\": \"bedroom\",\n    \"bed_type\":\"double\",\n    \"rent\":1000,\n    \"property_id\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/room",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"room"
					]
				}
			},
			"response": []
		},
		{
			"name": "List Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/bookings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"bookings"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"room_id\": 1,\n    \"check_in\": \"2025-07-29\",\n    \"check_out\": \"2025-07-30\",\n    \"status\":\"BOOKED\",\n    \"user_id\":1,\n    \"property_id\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/book",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"book"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}